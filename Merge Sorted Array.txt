void mergesort(int a[], int l, int m, int r);
void mers(int nums1[], int l, int r);
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int l = 0, r = m + n - 1;
        int t = 0;
        int* a = new int[m + n];
        for (int i = 0; i < m; i++)
            a[i] = nums1[i];
        for (int i = m; i < n + m; i++)
        {
            a[i] = nums2[t];
            ++t;
        }
        mers(a, l, r);
       for (int i = 0; i < m + n; i++)
        {
            nums1[i] = a[i];
        }
    }    
    };
void mers(int nums1[], int l, int r)
{
    if (l >= r) return;
    int m = (l + r) / 2;
    mers(nums1, l, m);
    mers(nums1, m + 1, r);
    mergesort(nums1, l, m, r);
}
void mergesort(int a[], int l, int m, int r)
{
    vector<int> x(a + l, a + m + 1);
    vector<int> y(a + m + 1, a + r + 1);
    int i = 0, j = 0;
    while (i < x.size() && j < y.size())
    {
        if (x[i] <= y[j])
        {
            a[l] = x[i];
            ++i;
            ++l;
        }
        else
        {
            a[l] = y[j];
            ++j;
            ++l;
        }
    }
    while (i < x.size())
    {
        a[l] = x[i];
        ++i;
        ++l;
    }
    while (j < y.size())
    {
        a[l] = y[j];
        ++j;
        ++l;
    }
}
